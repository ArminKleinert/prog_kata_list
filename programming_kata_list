LVL | Points | -last | Name
----+--------+-------+-----------------------
0   |      0 |     0 | Normal
1   |     50 |    50 | Novice
2   |    150 |   100 | Novice Bronze
3   |    300 |   150 | Novice Silver
4   |    500 |   200 | Novice Gold
5   |    750 |   250 | Novice Diamond
6   |   1100 |   350 | Apprentice
7   |   1550 |   450 | Apprentice Bronze
8   |   2100 |   550 | Apprentice Silver
9   |   2750 |   650 | Apprentice Gold
10  |   3500 |   750 | Apprentice Diamond
11  |   4450 |   950 | Adept
12  |   5600 |  1150 | Adept Bronze
13  |   6950 |  1350 | Adept Silver
14  |   8500 |  1550 | Adept Gold
15  |  10250 |  1750 | Adept Diamond
16  |  12200 |  1950 | Adept Star
17  |  14450 |  2250 | Expert
18  |  17000 |  2550 | Expert Bronze
19  |  19850 |  2850 | Expert Silver
20  |  23000 |  3150 | Expert Gold
21  |  26450 |  3450 | Expert Diamond
22  |  30200 |  3750 | Expert Star
23  |  34350 |  4150 | Master
24  |  38900 |  4550 | Master Bronze
25  |  43950 |  5050 | Master Silver
26  |  49500 |  5550 | Master Gold
27  |  55650 |  6150 | Master Diamond
28  |  62400 |  6750 | Master Star
29  |  69850 |  7450 | Master Star2
30  |  80000 | 10150 | Master Star3

Fun with numbers
10 Pt.
- Implement sum_of_divisors (SOD) function
  Sum all divisors of an integer (Except the number and 1). Negative numbers give negative output. Expect input to be an integer.
- Implement notxorshift64 (Example in Crystal)
- Implement fibonacci with (Pts. are given for each)
  - Recursion
  - Memoization (if possible)
  - Tail recursion (if possible)
  - Big numbers (fib(5000))
  - Iterative with for/while/(goto (maybe))
- Implement factorial with (Pts. are given for each)
  - Recursion
  - Tail recursion
  - Memoization (if possible)
  - Big numbers (if possible)
  - Iteration
- Reverse number digits without creating a string
- Implement a function which calculates the multiplication persistance of a number. (Examples in Ruby and D)
100 Pt.
- Write a program which finds the first number with a multiplication persistance of 9 (Examples in Ruby and D)
  - Optimize
  - Measure time
  - You will need big numbers!

Fun with Strings
10 Pt.
- "lines" function for string
- "chars" function for string
- Roman<->Arabic numbers
- Function that changes the following if inside a word:
  5 to S, 0 to O, 1 to I, etc.
- "pad_left" function (takes string, new length and filler-string)
- "pad_right" function (takes string, new length and filler-string)
100 Pt.
- Find longest common sequence in 2 strings (See lcs_example.java)
- StringToCamelcase function: https://www.codewars.com/kata/517abf86da9663f1d2000003
- tabs to spaces and spaces to tabs
- Write a string-to-float function
- Write a float-to-string function
- Length of the longest substring without repeating characters
  https://leetcode.com/problems/longest-substring-without-repeating-characters/solution/Longest
- Substring with At Least N Repeating Characters
- Longest Substring with At Most N Distinct Characters
- Write a string-to-int function without number format (Always decimal)
- Write a string-to-int function with number format (decimal, hex, binary, octal)
- Write an int-to-string funtion without number format (Always decimal)
- Write an int-to-string funtion with number format (decimal, hex, binary, octal)

Fun with Collections
10 Pt.
- Get only non-unique elements from sequence
- Get only unique elements from sequence
- Average of a sequence
- Sum of a sequence
- Minimal value of a sequence
- Maximum value of a sequence
- Implement Quicksort (Example in Quicksort.java)
- Implement Bubblesort (Example in Bubblesort.java)
- Length of a sequence
100 Pt.
- "reduce/foldl" sequence with function as argument
- "foldr"
- "map" function to sequence and return modified sequence
- "map_in_place" Apply function to items in sequence and modify them in place.
- "filter/select" and "remove/delete" function for lists with predicate function
- "contains/includes" function for sequence
. "deep-contains" function for nested maps/lists
- "any", "some" and "all" functions checking predicates on lists
- "index of" function
- "last_index_of" function
- "sublist" function
- "walk" function

Fun with Files
10 Pt.
- "Hello-World" interpreter
- Copy file / directory
- Create temp file / dir
- Force remove file
- Force remove directory
- Read file to string. If not possible, return nil
100 Pt.
- csv parser
- Implement StupidCrypt algorithm (See stupidcrypt.cr)
500 Pt.
- json parser
- json to csv converter
1000 Pt.
- xml parser
- xml comparator
- xml to json converter
- DTD - xml validator
- xlsx (excel) reader (zip reader and xml parser are provided)
- Algorithm for compressing files
- Zip-reader

Fun with Data-structures
> Collections need to have functions for adding, getting and removing elements;
> Points are doubled oubled if the functional iterators are also implemented (if applicable): "map", "foreach", "filter", "remove", "any?/some", "all?/every?", "reduce/foldl", "foldr"
> Number types need functions for all math-operators and convertions to integral and floating-point types.
100 Pt.
- Range
- BitSet
- Rational number
- FreezableCollection (Dynamic collection with a "freeze" method that makes it immutable; You should build this on top of another type you made)
500 Pt.
- ArrayList (Dynamic random access list)
- LinkedList
- DoubleLinkedList
- LinkedDeque
- ArrayDeque
- LinkedQueue
- ArrayQueue
- Stack
- HashSet
- HashMap
- ArrayMap (Map implementation which internally uses ONE array)
- ArrayMap2 (Map implementation which internally uses TWO arrays)
- SortedSet
- SortedMap
- StringBuilder (like in Java)
- Complex number
- BinaryTree
- Bag
- PersistentList
- PersistentVector
- PersistentDeque
- PersistentSet
- PersistentMap
1000 Pt.
- LazySequence
- BigInteger
- BigDecimal
- BigString (indexing by long)
- BigList (indexing by long)

Fun with games
1000 Pt.
- Sudoku (Console)
- Minesweeper
- Space invaders
- Tetris
- Flappy bird
- Chess
- Random dungeon generator
- Rogue

Fun with AI
5000 Pt.
- Sudoku-Solver
- Chess
- Rogue (Assuming predictable randomness)
- Chatbot

Fun with networks
1000 Pt.
- e-mail sender
- read info from server and send to console / chatroom
- Get description-text from YouTube video
5000 Pt.
- Screen-streaming-tool

Low-level fun
1000 Pt.
- Hidden Keylogger, prints pressed keys to a file
- Write a curses-wrapper by using the ffi of your language
- Write a conversion for linenoise from C to your language of choice
  https://github.com/antirez/linenoise

Esoteric fun
1000 Pt.
- Befunge interpreter
- Shakespear interpreter
- Omg-Rofl interpreter

Productive fun
500 Pt.
- Write an Eclipse-plugin
- SQL-converter
1000 Pt.
- Text-editor

Fun with Interpreters
1000 Pt.
- Write an interpreter for MAL
- Write an interpreter for Scheme
- Write an interpreter for Shaza
- Write an interpreter for Lox
5000 Pt.
- Write a compiler for Scheme
- Write a compiler for FieraPL
- Write a compiler for Shaza

Other
- Youtube-to-MP3 converter (5000 Pt.)
